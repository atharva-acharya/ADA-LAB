#include<stdio.h>
#define V 4
#define INF 99999

void printSolution(int dist[][V]);



void floyd(int A[][4])
{
  int i,j,k,P[4][4];

  for(i=0;i<4;i++)
     for(j=0;j<4;j++)
        P[i][j]=A[i][j];

  for(k=0;k<4;k++)
      for(i=0;i<4;i++)
          for(j=0;j<4;j++)
               if (P[i][k] + P[k][j] < P[i][j])
                    P[i][j] = P[i][k] + P[k][j];

   printSolution(P);
}

void printSolution(int P[][V])
{
    printf ("The following matrix shows the shortest distances"
            " between every pair of vertices \n");
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            if (P[i][j] == INF)
                printf("%7s", "INF");
            else
                printf ("%7d", P[i][j]);
        }
        printf("\n");
    }
}


int main()
{
    int graph[V][V] = { {0,5,INF,10},
                        {INF,0,3,INF},
                        {INF,INF,0,1},
                        {INF,INF,INF,0}
                      };
    printf("\n\n");
    floyd(graph);
    return 0;
}
